#!/usr/bin/env node
/* global process */
/* eslint no-process-exit: 0 */
/* eslint import/no-commonjs: 0 */
/* eslint-env es6 */
'use strict'

/**
 * Module dependencies.
 */
require('babel-register')
require('babel-polyfill')

const App = require('../src/app').default

const server = new App()

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {number} val port number
 * @return {boolean} always false
 */
const normalizePort = val => {
  const port = parseInt(val, 10)
  // named pipe
  if (isNaN(port))
    return val
  // port number
  if (port >= 0)
    return port
  return false
}


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '7080')
server.app.set('port', port)

/**
 * Listen on provided port, on all network interfaces.
 */
server.app.listen(port)

/**
 * Event listener for HTTP server "error" event.
 */
server.app.on('error', error => {
  if (error.syscall !== 'listen')
    throw error

  const bind = typeof port === 'string'
    ? `Pipe ${ port }`
    : `Port ${ port }`

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.log(`${ bind } requires elevated privileges`)
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.log(`${ bind } is already in use`)
    process.exit(1)
    break
  default:
    throw error
  }
})

/**
 * Event listener for HTTP server "listening" event.
 */
server.app.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${ addr }`
    : `port ${ addr.port }`
  console.log(`Listening on ${ bind }`)
})

server.start()

module.exports = server
